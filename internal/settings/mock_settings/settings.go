// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qdm12/ddns-updater/internal/settings (interfaces: Settings)

// Package mock_settings is a generated GoMock package.
package mock_settings

import (
	context "context"
	net "net"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/qdm12/ddns-updater/internal/models"
	ipversion "github.com/qdm12/ddns-updater/pkg/publicip/ipversion"
)

// MockSettings is a mock of Settings interface.
type MockSettings struct {
	ctrl     *gomock.Controller
	recorder *MockSettingsMockRecorder
}

// MockSettingsMockRecorder is the mock recorder for MockSettings.
type MockSettingsMockRecorder struct {
	mock *MockSettings
}

// NewMockSettings creates a new mock instance.
func NewMockSettings(ctrl *gomock.Controller) *MockSettings {
	mock := &MockSettings{ctrl: ctrl}
	mock.recorder = &MockSettingsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSettings) EXPECT() *MockSettingsMockRecorder {
	return m.recorder
}

// BuildDomainName mocks base method.
func (m *MockSettings) BuildDomainName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildDomainName")
	ret0, _ := ret[0].(string)
	return ret0
}

// BuildDomainName indicates an expected call of BuildDomainName.
func (mr *MockSettingsMockRecorder) BuildDomainName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildDomainName", reflect.TypeOf((*MockSettings)(nil).BuildDomainName))
}

// Domain mocks base method.
func (m *MockSettings) Domain() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Domain")
	ret0, _ := ret[0].(string)
	return ret0
}

// Domain indicates an expected call of Domain.
func (mr *MockSettingsMockRecorder) Domain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Domain", reflect.TypeOf((*MockSettings)(nil).Domain))
}

// HTML mocks base method.
func (m *MockSettings) HTML() models.HTMLRow {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTML")
	ret0, _ := ret[0].(models.HTMLRow)
	return ret0
}

// HTML indicates an expected call of HTML.
func (mr *MockSettingsMockRecorder) HTML() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTML", reflect.TypeOf((*MockSettings)(nil).HTML))
}

// Host mocks base method.
func (m *MockSettings) Host() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Host")
	ret0, _ := ret[0].(string)
	return ret0
}

// Host indicates an expected call of Host.
func (mr *MockSettingsMockRecorder) Host() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Host", reflect.TypeOf((*MockSettings)(nil).Host))
}

// IPVersion mocks base method.
func (m *MockSettings) IPVersion() ipversion.IPVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IPVersion")
	ret0, _ := ret[0].(ipversion.IPVersion)
	return ret0
}

// IPVersion indicates an expected call of IPVersion.
func (mr *MockSettingsMockRecorder) IPVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IPVersion", reflect.TypeOf((*MockSettings)(nil).IPVersion))
}

// MarshalJSON mocks base method.
func (m *MockSettings) MarshalJSON() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalJSON indicates an expected call of MarshalJSON.
func (mr *MockSettingsMockRecorder) MarshalJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalJSON", reflect.TypeOf((*MockSettings)(nil).MarshalJSON))
}

// Proxied mocks base method.
func (m *MockSettings) Proxied() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Proxied")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Proxied indicates an expected call of Proxied.
func (mr *MockSettingsMockRecorder) Proxied() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proxied", reflect.TypeOf((*MockSettings)(nil).Proxied))
}

// String mocks base method.
func (m *MockSettings) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockSettingsMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockSettings)(nil).String))
}

// Update mocks base method.
func (m *MockSettings) Update(arg0 context.Context, arg1 *http.Client, arg2 net.IP) (net.IP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(net.IP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSettingsMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSettings)(nil).Update), arg0, arg1, arg2)
}
